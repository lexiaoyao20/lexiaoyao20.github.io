<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[禅与 Objective-C 编程艺术学习笔记<一> -- 类簇]]></title>
      <url>http://bobdev.cn/2016/07/02/%E7%A6%85%E4%B8%8E-Objective-C-%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80-%E7%B1%BB%E7%B0%87/</url>
      <content type="html"><![CDATA[<p>《禅与 Objective-C 编程艺术学习》是一本开源的电子书，你可以把它当做一本编程规范的书来看，也可以看做是一本 <em>Effective Objective-C</em>，电子书传送门：<a href="https://github.com/oa414/objc-zen-book-cn/" target="_blank" rel="external">禅与 Objective-C 编程艺术学习</a>，非常推荐大家看一看。</p>
<h2 id="类簇介绍（Class-Clusters）"><a href="#类簇介绍（Class-Clusters）" class="headerlink" title="类簇介绍（Class Clusters）"></a>类簇介绍（Class Clusters）</h2><p>类簇在Apple的文档中这样描述：</p>
<blockquote>
<p>an architecture that groups a number of private, concrete subclasses under a public, abstract superclass. （一个在共有的抽象超类下设置一组私有子类的架构）</p>
</blockquote>
<p>如果这个描述听起来很熟悉，说明你的直觉是对的。 Class cluster 是 Apple 对<a href="https://en.wikipedia.org/wiki/Abstract_factory_pattern" target="_blank" rel="external">抽象工厂</a>设计模式的称呼。</p>
<p>Class Clusters 的想法很简单: 使用信息进行(类的)初始化处理期间，会使用一个抽象类（通常作为初始化方法的参数或者判定环境的可用性参数）来完成特定的逻辑或者实例化一个具体的子类。而这个”Public Facing（面向公众的）”类，必须非常清楚他的私有子类，以便在面对具体任务的时候有能力返回一个恰当的私有子类实例。对调用者来说只需知道对象的各种API的作用即可。<strong>这个模式隐藏了他背后复杂的初始化逻辑，调用者也不需要关心背后的实现</strong>。</p>
<p>Class Clusters 在 Apple 的Framework 中广泛使用：一些明显的例子比如 <code>NSNumber</code> 可以返回不同类型给你的子类，取决于 数字类型如何提供 (Integer, Float, etc…) 或者 <code>NSArray</code> 返回不同的最优存储策略的子类。</p>
<p>这个模式的精妙的地方在于，调用者可以完全不管子类，只需使用简单地接口，就可以得到实际的返回的类，而不用去管相关的细节。</p>
<p><strong>我们的经验是使用类簇可以帮助移除很多条件语句</strong>。</p>
<h2 id="类簇实例"><a href="#类簇实例" class="headerlink" title="类簇实例"></a>类簇实例</h2><p>一个经典的例子是如果你有为 iPad 和 iPhone 写的一样的 <code>UIViewController</code> 子类，但是在不同的设备上有不同的行为。</p>
<p>比较基础的实现是用条件语句检查设备，然后执行不同的逻辑。虽然刚开始可能不错，但是随着代码的增长，运行逻辑也会趋于复杂。 一个更好的实现的设计是创建一个抽象而且宽泛的 view controller 来包含所有的共享逻辑，并且对于不同设备有两个特别的子例。</p>
<p>通用的 view controller 会检查当前设备并且返回适当的子类。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@implementation</span> ZOCKintsugiPhotoViewController</span><br><span class="line"></span><br><span class="line">- (id)<span class="attribute">initWithPhotos</span>:(NSArray *)photos</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1.</span></span><br><span class="line">    <span class="selector-tag">if</span> ([self <span class="attribute">isMemberOfClass</span>:ZOCKintsugiPhotoViewController.class]) &#123;</span><br><span class="line">        <span class="comment">//2.</span></span><br><span class="line">        self = nil;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.</span></span><br><span class="line">        <span class="selector-tag">if</span> ([UIDevice isPad]) &#123;</span><br><span class="line">            self = <span class="selector-attr">[[ZOCKintsugiPhotoViewController_iPad alloc]</span> <span class="selector-tag">initWithPhotos</span><span class="selector-pseudo">:photos</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            self = <span class="selector-attr">[[ZOCKintsugiPhotoViewController_iPhone alloc]</span> <span class="selector-tag">initWithPhotos</span><span class="selector-pseudo">:photos</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        return self;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="selector-attr">[super initWithNibName:nil bundle:nil]</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@implementation</span> ZOCKintsugiPhotoViewController_iPad</span><br><span class="line"></span><br><span class="line">- (instancetype)<span class="attribute">initWithPhotos</span>:(NSArray *)photos &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">@implementation</span> ZOCKintsugiPhotoViewController_iPhone</span><br><span class="line"></span><br><span class="line">- (instancetype)<span class="attribute">initWithPhotos</span>:(NSArray *)photos &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure></p>
<p>这个实例展示了如何创建一个类簇。</p>
<ol>
<li><p><code>isMemberOfClass:</code>方法的作用是判断是否是这个类的实例，当<code>[[ZOCKintsugiPhotoViewController alloc] initWithPhotos:photos]</code> 被调用时，上面条件表达式的结果将会是 <code>true</code>，而使用它的子类，上面表达式结果将返回 <code>false</code>。这样 使用 <code>[self isMemberOfClass:ZOCKintsugiPhotoViewController.class]</code>可以 防止子类中重载初始化方法，避免无限递归。</p>
</li>
<li><p><code>self = nil</code> 的目的是移除 <code>ZOCKintsugiPhotoViewController</code> 实例上的所有引用，实例(抽象类的实例)本身将会解除分配（ 当然ARC也好MRC也好dealloc都会发生在Main Runloop这一次的结束时）。</p>
</li>
<li><p>接下来的逻辑就是判断哪一个私有子类将被初始化。</p>
</li>
</ol>
<p>最后，不管是在iPhone上还是在iPad上，我只需使用类似下面的代码，而不用管具体用的是哪个子类。<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSArray *photos = @[]<span class="comment">;</span></span><br><span class="line">ZOCKintsugiPhotoViewController *photoViewVC = [[ZOCKintsugiPhotoViewController alloc] initWithPhotos:photos]<span class="comment">;</span></span><br><span class="line">NSLog(@<span class="string">"photoViewVC:%@"</span>,photoViewVC)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>例如，我在iPhone下运行，输出的类名是 <code>ZOCKintsugiPhotoViewController_iPhone</code></p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-8cf3a33280d18b7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ClassName.png"></p>
<hr>
<p>另外，还有几篇篇关于类簇写得不错的博文，可以帮助我们更深层次的加强理解,有兴趣的可以去看下：</p>
<ul>
<li>sunnyxx 的 <a href="http://blog.sunnyxx.com/2014/12/18/class-cluster/" target="_blank" rel="external">从NSArray看类簇</a></li>
<li>Limboy的 <a href="http://limboy.me/ios/2014/01/04/class-cluster.html" target="_blank" rel="external">类簇在iOS开发中的应用</a></li>
<li><a href="http://xiongzenghuidegithub.github.io/blog/2016/05/09/class-cluster-lei-cu/" target="_blank" rel="external">一个iOS菜菜的白话文记录 - Class Cluster 类簇</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开源一个基于UICollectionView的标签展示控件]]></title>
      <url>http://bobdev.cn/2016/05/29/%E5%BC%80%E6%BA%90%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EUICollectionView%E7%9A%84%E6%A0%87%E7%AD%BE%E5%B1%95%E7%A4%BA%E6%8E%A7%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>首先，先上效果图。<br>示例一，仿天猫热门搜索标签的效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-92d0c01e7f97fe2b.gif?imageMogr2/auto-orient/strip" alt="热门搜索.gif"></p>
<p>实例二，动态添加和删除</p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-946e282042cb5fd6.gif?imageMogr2/auto-orient/strip" alt="动态添加和删除.gif"></p>
<p>源码连接：<a href="https://github.com/lexiaoyao20/FMTagsView" target="_blank" rel="external">Github</a></p>
<h2 id="1-特性"><a href="#1-特性" class="headerlink" title="1. 特性"></a>1. 特性</h2><ul>
<li>支持AutoLayout</li>
<li>支持自定义Tag的外观，如圆角，背景颜色，标签文字颜色…</li>
<li>支持动态添加和删除Tag</li>
<li>支持单选和多选模式</li>
</ul>
<h2 id="2-示例代码"><a href="#2-示例代码" class="headerlink" title="2. 示例代码"></a>2. 示例代码</h2><p>首先，添加 FMTagsView.h 和 FMTagsView.m 这两个文件到你项目中，或者使用pod来安装。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pod</span> <span class="string">'FMTagsView'</span></span><br></pre></td></tr></table></figure>
<p>控件初始化示例：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">FMTagsView *<span class="attr">tagsView</span> = [[FMTagsView alloc] initWithFrame:CGRectMake(<span class="number">10</span>, <span class="number">120</span>, <span class="number">300</span>, <span class="number">150</span>)];</span><br><span class="line">    tagsView.<span class="attr">contentInsets</span> = UIEdgeInsetsZero;</span><br><span class="line">    tagsView.<span class="attr">tagInsets</span> = UIEdgeInsetsMake(<span class="number">5</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">15</span>);</span><br><span class="line">    tagsView.<span class="attr">tagBorderWidth</span> = <span class="number">1</span>;</span><br><span class="line">    tagsView.<span class="attr">tagcornerRadius</span> = <span class="number">2</span>;</span><br><span class="line">    tagsView.<span class="attr">tagBorderColor</span> = [UIColor lightGrayColor];</span><br><span class="line">    tagsView.<span class="attr">tagSelectedBorderColor</span> = [UIColor lightGrayColor];</span><br><span class="line">    tagsView.<span class="attr">tagBackgroundColor</span> = [UIColor whiteColor];</span><br><span class="line">    tagsView.<span class="attr">lineSpacing</span> = <span class="number">10</span>;</span><br><span class="line">    tagsView.<span class="attr">interitemSpacing</span> = <span class="number">10</span>;</span><br><span class="line">    tagsView.<span class="attr">tagFont</span> = [UIFont systemFontOfSize:<span class="number">14</span>];</span><br><span class="line">    tagsView.<span class="attr">tagTextColor</span> = [UIColor grayColor];</span><br><span class="line">    tagsView.<span class="attr">delegate</span> = self;</span><br><span class="line">    [self.view addSubview:tagsView];</span><br><span class="line">    </span><br><span class="line">    NSArray *<span class="attr">dataArray</span> = @[@<span class="string">"麻棉连衣裙"</span>, @<span class="string">"面条"</span>, @<span class="string">"亲子装"</span>,</span><br><span class="line">                       @<span class="string">"卫生巾"</span>, @<span class="string">"米"</span>, @<span class="string">"眉笔"</span>, @<span class="string">"蛋糕"</span>,</span><br><span class="line">                       @<span class="string">"面包"</span>, @<span class="string">"洗洁精"</span>, @<span class="string">"咖啡速溶"</span>,</span><br><span class="line">                       @<span class="string">"云南白药牙膏"</span>, @<span class="string">"方便面"</span>, @<span class="string">"空调"</span>];</span><br><span class="line">    //设置数据源</span><br><span class="line">    tagsView.<span class="attr">tagsArray</span> = dataArray;</span><br></pre></td></tr></table></figure></p>
<p>实现代理方法：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击标签处理逻辑</span></span><br><span class="line">- (<span class="keyword">void</span>)tagsView:(FMTagsView *)tagsView didSelectTagAtIndex:(<span class="built_in">NSUInteger</span>)index &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *selectedKey = <span class="keyword">self</span>.dataArray[index];</span><br><span class="line">    <span class="built_in">UIViewController</span> *controller = [[<span class="built_in">UIViewController</span> alloc] init];</span><br><span class="line">    controller.view.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    controller.title = selectedKey;</span><br><span class="line">    [<span class="keyword">self</span>.navigationController pushViewController:controller animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS - 如何实现弱引用字典]]></title>
      <url>http://bobdev.cn/2016/05/12/iOS-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BC%B1%E5%BC%95%E7%94%A8%E5%AD%97%E5%85%B8/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>我们都有用过 <code>UIButton</code> 的这个方法：<br> <code>- (void)addTarget:(nullable id)target action:(SEL)action forControlEvents:(UIControlEvents)controlEvents;</code> 不知道大家是否有去想过里面的实现原理。<code>addTarget:action:forControlEvents</code> 方法是用什么来保存这个target呢？<br>显然，里面不是用的数组就是用的字典来保存target，而target和action又是一一对应的，所以我猜其内部是用一个字典来保存。</p>
<p>但是，我们都知道 <code>NSMutableDictionary</code> 的 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSMutableDictionary_Class/index.html#//apple_ref/occ/instm/NSMutableDictionary/setObject:forKey:" target="_blank" rel="external">- setObject:forKey:</a> 方法会强引用对象，这样就会很容易造成循环引用。下面举个例子来说明一下。</p>
<p>例如，我们有一个viewController，viewController上有对 <code>UIButton</code> 的强引用，<code>UIButton</code> 调用 <code>addTarget:action:forControlEvents</code> 中这个target又是viewController，示例代码如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIButton</span> *button;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.button = [[<span class="built_in">UIButton</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">32</span>)];</span><br><span class="line">    [<span class="keyword">self</span>.button setTitle:<span class="string">@"Button"</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [<span class="keyword">self</span>.button setBackgroundColor:[<span class="built_in">UIColor</span> redColor]];</span><br><span class="line">    <span class="keyword">self</span>.button.titleLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">19</span>];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.button addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(touchButton:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)touchButton:(<span class="built_in">UIButton</span> *)button &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"touchButton"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<p>按照常规的逻辑，会形成如下图的一个循环引用。</p>
<p><img src="http://o7632ob54.bkt.clouddn.com/452998-5c7a374828325fb0.png" alt="图1：循环引用.png"></p>
<p>但是实际上并没有形成循环引用，说明苹果内部做了处理。<br>接下来，我会介绍有哪些方法可以实现弱引用字典。</p>
<h2 id="方法一：NSValue"><a href="#方法一：NSValue" class="headerlink" title="方法一：NSValue"></a>方法一：NSValue</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (nullable <span class="keyword">id</span>)objectForKey:(<span class="keyword">id</span>&lt;<span class="built_in">NSCopying</span>&gt;)aKey &#123;</span><br><span class="line">    <span class="built_in">NSValue</span> *value = [<span class="keyword">self</span> objectForKey:aKey];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> value.nonretainedObjectValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)fm_setObject:(<span class="keyword">id</span>)anObject forKey:(<span class="keyword">id</span> &lt;<span class="built_in">NSCopying</span>&gt;)aKey &#123;</span><br><span class="line">    <span class="built_in">NSValue</span> *value = [<span class="built_in">NSValue</span> valueWithNonretainedObject:anObject];</span><br><span class="line">    [<span class="keyword">self</span> setObject:value forKey:aKey];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)fm_setDictionary:(<span class="built_in">NSDictionary</span> *)otherDictionary &#123;</span><br><span class="line">    [otherDictionary enumerateKeysAndObjectsUsingBlock:^(<span class="keyword">id</span>  _Nonnull key,</span><br><span class="line">                                                         <span class="keyword">id</span>  _Nonnull obj,</span><br><span class="line">                                                         <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">        [<span class="keyword">self</span> fm_setObject:obj forKey:key];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分别用到了 <code>NSValue</code> 的 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSValue_Class/index.html#//apple_ref/occ/clm/NSValue/valueWithNonretainedObject:" target="_blank" rel="external">+ valueWithNonretainedObject: </a> 和 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSValue_Class/index.html#//apple_ref/occ/instp/NSValue/nonretainedObjectValue" target="_blank" rel="external">nonretainedObjectValue </a> 方法来存取对象。</p>
<h2 id="方法二：用block封装与解封"><a href="#方法二：用block封装与解封" class="headerlink" title="方法二：用block封装与解封"></a>方法二：用block封装与解封</h2><p>下面的代码是从 <a href="https://github.com/Magic-Unique/HXImage/blob/master/description.md#方案二之-弱引用字典" target="_blank" rel="external">HXImage</a> 拿过来的。</p>
<blockquote>
<p>利用block封装一个对象, 且block中对象的持有操作是一个弱引用指针. 而后将block当做对象放入容器中. 容器直接持有block, 而不直接持有对象. 取对象时解包block即可得到对应对象.</p>
</blockquote>
<h3 id="第一步，封装与解封装"><a href="#第一步，封装与解封装" class="headerlink" title="第一步，封装与解封装"></a>第一步，封装与解封装</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">typedef <span class="title">id</span> (<span class="params">^WeakReference</span>)(<span class="params"><span class="keyword">void</span></span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">WeakReference <span class="title">makeWeakReference</span>(<span class="params">id <span class="keyword">object</span></span>) </span>&#123;</span><br><span class="line">    __weak id weakref = <span class="keyword">object</span>;</span><br><span class="line">    <span class="keyword">return</span> ^&#123;</span><br><span class="line">        <span class="keyword">return</span> weakref;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">id <span class="title">weakReferenceNonretainedObjectValue</span>(<span class="params">WeakReference <span class="keyword">ref</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">ref</span> ? <span class="keyword">ref</span>() : nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二步，改造原容器"><a href="#第二步，改造原容器" class="headerlink" title="第二步，改造原容器"></a>第二步，改造原容器</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)weak_setObject:(<span class="keyword">id</span>)anObject forKey:(<span class="built_in">NSString</span> *)aKey &#123;</span><br><span class="line">    [<span class="keyword">self</span> setObject:makeWeakReference(anObject) forKey:aKey];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)weak_setObjectWithDictionary:(<span class="built_in">NSDictionary</span> *)dic &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *key <span class="keyword">in</span> dic.allKeys) &#123;</span><br><span class="line">        [<span class="keyword">self</span> setObject:makeWeakReference(dic[key]) forKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)weak_getObjectForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">return</span> weakReferenceNonretainedObjectValue(<span class="keyword">self</span>[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="方法三：使用NSProxy-的子类"><a href="#方法三：使用NSProxy-的子类" class="headerlink" title="方法三：使用NSProxy 的子类"></a>方法三：使用NSProxy 的子类</h2><p>像<a href="https://github.com/ibireme/YYKit" target="_blank" rel="external">YYKit</a> 这套框架就是用的这种方法，完整可以参见 <a href="https://github.com/ibireme/YYKit/blob/master/YYKit/Utility/YYWeakProxy.m" target="_blank" rel="external">YYWeakProxy</a> 这个类。<br>下面摘取了部分代码：<br><a href="https://github.com/ibireme/YYKit/blob/master/YYKit/Utility/YYWeakProxy.h" target="_blank" rel="external">YYWeakProxy.h</a> 文件.<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YYWeakProxy</span> : <span class="title">NSProxy</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The proxy target.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (nullable, <span class="keyword">nonatomic</span>, <span class="keyword">weak</span>, <span class="keyword">readonly</span>) <span class="keyword">id</span> target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Creates a new weak proxy for target.</span><br><span class="line"> @param target Target object.</span><br><span class="line"> @return A new proxy object.</span><br><span class="line"> */</span></span><br><span class="line">- (instancetype)initWithTarget:(<span class="keyword">id</span>)target;</span><br><span class="line"></span><br><span class="line">+ (instancetype)proxyWithTarget:(<span class="keyword">id</span>)target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/ibireme/YYKit/blob/master/YYKit/Utility/YYWeakProxy.m" target="_blank" rel="external">YYWeakProxy.m</a> 文件.<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@implementation</span> YYWeakProxy</span><br><span class="line"></span><br><span class="line">- (instancetype)<span class="attribute">initWithTarget</span>:(id)target &#123;</span><br><span class="line">    _target = target;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (instancetype)<span class="attribute">proxyWithTarget</span>:(id)target &#123;</span><br><span class="line">    return <span class="selector-attr">[[YYWeakProxy alloc]</span> <span class="selector-tag">initWithTarget</span><span class="selector-pseudo">:target</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (id)<span class="attribute">forwardingTargetForSelector</span>:(SEL)selector &#123;</span><br><span class="line">    return _target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)<span class="attribute">forwardInvocation</span>:(NSInvocation *)invocation &#123;</span><br><span class="line">    void *null = NULL;</span><br><span class="line">    <span class="selector-attr">[invocation setReturnValue:&amp;null]</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSMethodSignature *)<span class="attribute">methodSignatureForSelector</span>:(SEL)selector &#123;</span><br><span class="line">    return <span class="selector-attr">[NSObject instanceMethodSignatureForSelector:@selector(init)]</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)<span class="attribute">respondsToSelector</span>:(SEL)aSelector &#123;</span><br><span class="line">    return <span class="selector-attr">[_target respondsToSelector:aSelector]</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//... </span></span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure></p>
<p>具体使用的示例代码：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@implementation</span> MyView &#123;</span><br><span class="line">    NSTimer *_timer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)initTimer &#123;</span><br><span class="line">    YYWeakProxy *proxy = <span class="selector-attr">[YYWeakProxy proxyWithTarget:self]</span>;</span><br><span class="line">    _timer = <span class="selector-attr">[NSTimer timerWithTimeInterval:0.1</span><br><span class="line">                                     target:proxy</span><br><span class="line">                                   selector:@selector(tick:)</span><br><span class="line">                                   userInfo:nil</span><br><span class="line">                                    repeats:YES]</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)<span class="attribute">tick</span>:(NSTimer *)timer &#123;...&#125;</span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure></p>
<p>你可能会问前面两个方法不是很简单吗，干嘛要搞得这么麻烦？<br>其实，这主要是为了利用 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSProxy_Class/index.html" target="_blank" rel="external">NSProxy</a> 来实现代理模式，使用 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSProxy_Class/index.html" target="_blank" rel="external">NSProxy</a> 的消息转发机制让它来调用其他类的方法。 这样做和前面两个方法有一个不一样的地方：前面两个方法都要存取对象，要把对象从容器中取出来才能用；第三个方法利用了<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSProxy_Class/index.html" target="_blank" rel="external">NSProxy</a>消息转发机制就不需要这样做了。</p>
<p>更多的 <code>NSProxy</code> 使用 可以参考 <a href="http://www.cnblogs.com/dlx-Blog/p/4425501.html" target="_blank" rel="external">NSProxy使用笔记</a>。</p>
<p>总结：三种方法都可以实现弱引用字典，具体用哪种方法就看你个人喜好咯。当然，用上面三种方法也可以实现弱引用数组。<br>我这里用第一种方法简单的封装了下弱引用数组和弱引用字典：<a href="https://github.com/lexiaoyao20/WeakDictionary/tree/master/WeakDictionary/WeakObject" target="_blank" rel="external">https://github.com/lexiaoyao20/WeakDictionary/tree/master/WeakDictionary/WeakObject</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[谈一谈UIScrollView的scrollsToTop属性]]></title>
      <url>http://bobdev.cn/2016/05/06/%E8%B0%88%E4%B8%80%E8%B0%88UIScrollView%E7%9A%84scrollsToTop%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>相信很多人都没有注意到iOS有这样一个隐藏的功能：当前页面有滚动视图（ <code>UIScrollView</code> 或者 <code>UIScrollView</code> 的子类，下面我都称作滚动视图），触摸状态栏，视图会自动滚动的最顶端，相当于一些网页的回到顶端的功能。下面给个图来展示下：</p>
<p><img src="http://o7632ob54.bkt.clouddn.com/scrollToTop.gif" alt="图1：触摸状态栏回到顶部"></p>
<p>#一. 遇到的问题<br>如果页面有多个滚动视图，如顶部一个广告轮播控件（假如是基于 <code>UIScrollView</code> 的轮播控件），下面是一个TableView，你会发现触摸状态栏没有反应了，回到顶部功能失效。</p>
<p>#二. 解决问题<br>细细研究了一番返现，<code>UIScrollView</code> 有个<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIScrollView_Class/#//apple_ref/occ/instp/UIScrollView/scrollsToTop" target="_blank" rel="external">scrollsToTop</a>属性，这个属性就是控制滚动到顶部手势的开关。它的默认值是 <code>YES</code> ，所以不用我们设置，默认是支持滚动到顶部的。具体详细描述如下：</p>
<blockquote>
<p>The scroll-to-top gesture is a tap on the status bar. When a user makes this gesture, the system asks the scroll view closest to the status bar to scroll to the top. If that scroll view has <code>scrollsToTop</code><br>set to <code>NO</code> , its delegate returns <code>NO</code> from <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIScrollViewDelegate_Protocol/index.html#//apple_ref/occ/intfm/UIScrollViewDelegate/scrollViewShouldScrollToTop:" target="_blank" rel="external">scrollViewShouldScrollToTop:</a><br>, or the content is already at the top, nothing happens.</p>
</blockquote>
<p>简单点的说就是有两种方式来设定 <code>scroll to top</code>，一个是设置 <code>scrollsToTop</code> 属性，另一个是实现<code>UIScrollView</code>的代理方法<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIScrollViewDelegate_Protocol/index.html#//apple_ref/occ/intfm/UIScrollViewDelegate/scrollViewShouldScrollToTop:" target="_blank" rel="external">scrollViewShouldScrollToTop:</a>。如果滚动视图<code>scrollsToTop</code>属性设为 <code>NO</code> ，它的代理方法<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIScrollViewDelegate_Protocol/index.html#//apple_ref/occ/intfm/UIScrollViewDelegate/scrollViewShouldScrollToTop:" target="_blank" rel="external">scrollViewShouldScrollToTop:</a>返回<code>NO</code>，或者内容已经在顶部了，这样触摸状态栏，是没有任何反应的。</p>
<p>好了，继续回到上面遇到的问题，既然默认是YES，为什么回到顶部的功能失效了呢，其实仔细想一想就知道了，因为有两个 scrollView，他们默认都有 <code>scroll to top</code> 功能，所以触摸状态栏时，系统无法判断是使哪个ScrollView回到顶部。</p>
<p>解决方案很简单，就是设置其中一个ScrollView的 <code>scrollsToTop</code> 值为 <code>NO</code>（例如我将广告轮播控件的 <code>scrollsToTop</code> 设为 <code>NO</code> ），这样系统就知道要使哪个 <code>ScrollView</code> 回到顶部了。如果当前页面有多个滚动视图的话，要确保只有一个滚动视图<code>scrollsToTop</code>的值为<code>YES</code>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义UISearchBar外观]]></title>
      <url>http://bobdev.cn/2016/05/06/%E8%87%AA%E5%AE%9A%E4%B9%89UISearchBar%E5%A4%96%E8%A7%82/</url>
      <content type="html"><![CDATA[<p>最近，在项目过程中遇到要自定义SearchBar的外观，虽然自己觉得用系统默认的外观就行了，不过UI设计师要求不用系统的默认样式，要跟app主题保持一致。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-2fb38aaa38a2b351.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1：设计效果图"></p>
<p>从上图可以看出，我们要做的UISearchBar要有圆角，边框颜色，取消按钮颜色，背景透明等等。</p>
<p>开始以为可能要自己写一个自定义的UISearchBar控件了，后面研究了一番，发现可以设定系统UISearchBar属性来更改，便把经验记录下来。</p>
<p>首先，我们看下系统默认的SearchBar的样式，离我们的目标样式确实相差很大, 后面我会一步一步详细说明做成我们的目标样式。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-aa74f9c818acb15c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2：UISearchBar默认样式"></p>
<h2 id="1-设置背景色"><a href="#1-设置背景色" class="headerlink" title="1. 设置背景色"></a>1. 设置背景色</h2><p>我以白色的背景色为例，下面看看代码：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 设置背景颜色</span></span><br><span class="line">    <span class="comment">//设置背景图是为了去掉上下黑线</span></span><br><span class="line">    <span class="keyword">self</span>.customSearchBar.backgroundImage = [[<span class="built_in">UIImage</span> alloc] init];</span><br><span class="line">    <span class="comment">// 设置SearchBar的颜色主题为白色</span></span><br><span class="line">    <span class="keyword">self</span>.customSearchBar.barTintColor = [<span class="built_in">UIColor</span> whiteColor];</span><br></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-334f53955785e12d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图3：设置SearchBar背景色为白色"></p>
<h2 id="2-设置边框颜色和圆角"><a href="#2-设置边框颜色和圆角" class="headerlink" title="2. 设置边框颜色和圆角"></a>2. 设置边框颜色和圆角</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//<span class="number">2</span>. 设置圆角和边框颜色</span><br><span class="line">    UITextField *searchField = [self.customSearchBar valueForKey:@"searchField"]<span class="comment">;</span></span><br><span class="line">    if (searchField) &#123;</span><br><span class="line">        [searchField setBackgroundColor:[UIColor whiteColor]]<span class="comment">;</span></span><br><span class="line">        searchField.layer.cornerRadius = <span class="number">14</span>.<span class="number">0</span>f<span class="comment">;</span></span><br><span class="line">        searchField.layer.borderColor = [UIColor colorWithRed:<span class="number">247/255.0</span> green:<span class="number">75/255.0</span> blue:<span class="number">31/255.0</span> alpha:<span class="number">1</span>].CGColor<span class="comment">;</span></span><br><span class="line">        searchField.layer.borderWidth = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">        searchField.layer.masksToBounds = YES<span class="comment">;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这段代码有个特别的地方就是通过KVC获得到UISearchBar的私有变量<br><em>searchField</em>（类型为UITextField），设置SearchBar的边框颜色和圆角实际上也就变成了设置<em>searchField</em>的边框颜色和圆角，你可以试试直接设置SearchBar.layer.borderColor和cornerRadius，会发现这样做是有问题的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-6124f34ef12a93c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图4：设置边框颜色和圆角"></p>
<p>嗯，离预期效果越来越近了，有木有！</p>
<h2 id="3-设置按钮（取消按钮）的文字和文字颜色"><a href="#3-设置按钮（取消按钮）的文字和文字颜色" class="headerlink" title="3. 设置按钮（取消按钮）的文字和文字颜色"></a>3. 设置按钮（取消按钮）的文字和文字颜色</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3. 设置按钮文字和颜色</span></span><br><span class="line">    [<span class="keyword">self</span>.customSearchBar fm_setCancelButtonTitle:<span class="string">@"取消"</span>];</span><br><span class="line">    <span class="keyword">self</span>.customSearchBar.tintColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">86</span>/<span class="number">255.0</span> green:<span class="number">179</span>/<span class="number">255.0</span> blue:<span class="number">11</span>/<span class="number">255.0</span> alpha:<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//修正光标颜色</span></span><br><span class="line">    [searchField setTintColor:[<span class="built_in">UIColor</span> blackColor]];</span><br><span class="line"></span><br><span class="line"><span class="comment">//其中fm_setCancelButtonTitle是我写的UISearchBar一个分类的方法</span></span><br><span class="line">- (<span class="keyword">void</span>)fm_setCancelButtonTitle:(<span class="built_in">NSString</span> *)title &#123;</span><br><span class="line">    <span class="keyword">if</span> (IS_IOS9) &#123;</span><br><span class="line">        [[<span class="built_in">UIBarButtonItem</span> appearanceWhenContainedInInstancesOfClasses:@[[<span class="built_in">UISearchBar</span> class]]] setTitle:title];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        [[<span class="built_in">UIBarButtonItem</span> appearanceWhenContainedIn:[<span class="built_in">UISearchBar</span> class], <span class="literal">nil</span>] setTitle:title];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-a5e30981395601fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图5：设置按钮文字和颜色"></p>
<blockquote>
<p>需要特别注意的是设置searchBar的tintColor会使输入框的光标颜色改变，可以通过设置searchField的tintColor来修正。</p>
</blockquote>
<h2 id="4-设置输入框的文字颜色和字体"><a href="#4-设置输入框的文字颜色和字体" class="headerlink" title="4. 设置输入框的文字颜色和字体"></a>4. 设置输入框的文字颜色和字体</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4. 设置输入框文字颜色和字体</span></span><br><span class="line">    [<span class="keyword">self</span>.customSearchBar fm_setTextColor:[<span class="built_in">UIColor</span> blackColor]];</span><br><span class="line">    [<span class="keyword">self</span>.customSearchBar fm_setTextFont:[<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">14</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面两个方法是UISearchBar分类代码</span></span><br><span class="line">- (<span class="keyword">void</span>)fm_setTextColor:(<span class="built_in">UIColor</span> *)textColor &#123;</span><br><span class="line">    <span class="keyword">if</span> (IS_IOS9) &#123;</span><br><span class="line">        [<span class="built_in">UITextField</span> appearanceWhenContainedInInstancesOfClasses:@[[<span class="built_in">UISearchBar</span> class]]].textColor = textColor;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        [[<span class="built_in">UITextField</span> appearanceWhenContainedIn:[<span class="built_in">UISearchBar</span> class], <span class="literal">nil</span>] setTextColor:textColor];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)fm_setCancelButtonTitle:(<span class="built_in">NSString</span> *)title &#123;</span><br><span class="line">    <span class="keyword">if</span> (IS_IOS9) &#123;</span><br><span class="line">        [[<span class="built_in">UIBarButtonItem</span> appearanceWhenContainedInInstancesOfClasses:@[[<span class="built_in">UISearchBar</span> class]]] setTitle:title];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        [[<span class="built_in">UIBarButtonItem</span> appearanceWhenContainedIn:[<span class="built_in">UISearchBar</span> class], <span class="literal">nil</span>] setTitle:title];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-f77ae765fab77822.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图6：最终对比效果图"></p>
<h2 id="5-如何设置搜索图标"><a href="#5-如何设置搜索图标" class="headerlink" title="5. 如何设置搜索图标"></a>5. 如何设置搜索图标</h2><p>下面评论中有简友问我怎么更改默认的搜索图标，我查了下UISearchBar的API，发现有方法可以更改的。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//<span class="number">5</span>. 设置搜索Icon</span><br><span class="line">    [<span class="literal">self</span>.customSearchBar <span class="built_in">set</span>Image:[UIImage imageNamed:@<span class="string">"Search_Icon"</span>]</span><br><span class="line">                  <span class="keyword">for</span>SearchBarIcon:UISearchBarIconSearch</span><br><span class="line">                             <span class="keyword">state</span>:UIControlStateNormal];</span><br></pre></td></tr></table></figure></p>
<p>为了跟系统默认Icon的有个明显的对比，我特殊找了张绿色的搜索Icon，效果见下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-447342dd9b0e5606.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置搜索Icon.png"></p>
<blockquote>
<p>Tips: 还可以设置其他的Icon（如清除按钮图标），也是用上面的方法，具体要设置什么，可以去看看UISearchBarIcon这个枚举。</p>
</blockquote>
<h2 id="最后，介绍下QQ的搜索样式的实现"><a href="#最后，介绍下QQ的搜索样式的实现" class="headerlink" title="最后，介绍下QQ的搜索样式的实现"></a>最后，介绍下QQ的搜索样式的实现</h2><p><img src="http://upload-images.jianshu.io/upload_images/452998-cd997d790643d76e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图7：类似QQ搜索框样式"></p>
<p>很简单，在storyboard中设置searchBar的Bar Style为Minimal，或者用代码设置 ：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置类似QQ搜索框</span></span><br><span class="line">    <span class="keyword">self</span>.minimalSearchBar.searchBarStyle = <span class="built_in">UISearchBarStyleMinimal</span>;</span><br></pre></td></tr></table></figure></p>
<p>完整代码在<a href="https://github.com/lexiaoyao20/CustomSearchBar/tree/master" target="_blank" rel="external">这里</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UINavigationBar 使用总结]]></title>
      <url>http://bobdev.cn/2016/05/06/UINavigationBar-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>UINavigationBar是我们在开发过程中经常要用到的一个控件，下面我会为大家介绍一些常用的用法。</p>
<h2 id="1-设置导航栏的标题"><a href="#1-设置导航栏的标题" class="headerlink" title="1. 设置导航栏的标题"></a>1. 设置导航栏的标题</h2><p>这个不多说，直接上代码<br><code>self.navigationItem.title = @&quot;UINavigationBar使用总结&quot;;</code></p>
<h2 id="2-设置导航栏的背景颜色"><a href="#2-设置导航栏的背景颜色" class="headerlink" title="2. 设置导航栏的背景颜色"></a>2. 设置导航栏的背景颜色</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过barTintColor来设置背景色</span></span><br><span class="line"> <span class="keyword">self</span>.navigationController.navigationBar.barTintColor = [<span class="built_in">UIColor</span> redColor];</span><br></pre></td></tr></table></figure>
<p>得到的效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-97239749e8c4d721.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20150912_1.png"></p>
<blockquote>
<p>barTintColor: 这个属性需要在iOS7以上才可以使用; 如果要支持iOS6以及以下的系统，可以参考这篇文章：<a href="http://www.saturngod.net/articles/uinavigationbar-background-color/" target="_blank" rel="external">UINavigationBar Background Color </a></p>
</blockquote>
<h2 id="3-设置导航栏的背景图片"><a href="#3-设置导航栏的背景图片" class="headerlink" title="3. 设置导航栏的背景图片"></a>3. 设置导航栏的背景图片</h2><p>除了通过设置背景颜色来改变导航栏的外观外，我们还可以通过背景图片来设置导航栏的外观。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span>.navigationController.navigationBar setBackgroundImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"Background"</span>]</span><br><span class="line">                                                  forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-0a1df5d00c980f4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20150912_2.png"></p>
<p>在这里得稍微说说UIBarMetrics这个枚举, 它主要是用来控制在不同状态下导航栏的显示。和UIButton的<br><code>- (void)setBackgroundImage:(nullable UIImage *)image forState:(UIControlState)state</code> 这个方法有点类似。</p>
<blockquote>
<p>//表示横屏竖屏都显示<br>    UIBarMetricsDefault,<br>    //表示在只横屏下才显示，和UIBarMetricsLandscapePhone功效一样，不过iOS8已经弃用了<br>    UIBarMetricsCompact,<br>    UIBarMetricsDefaultPrompt和UIBarMetricsCompactPrompt这两个我还没搞清楚是什么意思，有知道的朋友不妨给我们来普及一下。。</p>
</blockquote>
<h2 id="4-更改顶部状态栏的颜色"><a href="#4-更改顶部状态栏的颜色" class="headerlink" title="4. 更改顶部状态栏的颜色"></a>4. 更改顶部状态栏的颜色</h2><p>从效果图可以看出，我们设置背景色或者背景图之后，状态栏依然还是默认的黑色，这样感觉不好看。好在，系统给我们提供了<strong>UIStatusBarStyleDefault</strong>和<strong>UIStatusBarStyleLightContent</strong>两种样式供我们选择。</p>
<ul>
<li>UIStatusBarStyleDefault，系统的默认样式，黑色内容，用于浅色的背景（如白色）</li>
<li>UIStatusBarStyleLightContent  白色内容，用于深色的背景（如红色）</li>
</ul>
<p>下面来看看具体怎么实现，主流的实现方式是分两步：</p>
<ol>
<li>在工程的Info.plist文件中添加一行<strong>UIViewControllerBasedStatusBarAppearance</strong>，选择Boolean类型，并设置为YES，Xcode会自动把名称变为View controller-based status bar appearance。<br><img src="http://upload-images.jianshu.io/upload_images/452998-50f7c92516d33662.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20150913_4.png"></li>
<li>在你的ViewController中添加下面的方法<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIStatusBarStyleLightContent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>想知道更多地方式，可以参考这两个页面：<a href="http://stackoverflow.com/questions/17678881/how-to-change-status-bar-text-color-in-ios-7" target="_blank" rel="external">How to change Status Bar text color in iOS 7</a> 和 <a href="http://www.cnblogs.com/scorpiozj/p/3361162.html" target="_blank" rel="external">iOS7下Status Bar字体颜色修改</a></p>
<p>另外，<strong>特别需要注意的是</strong>，如果你的ViewController是通过navigationController push进来的，还需要加下面一句代码才能生效：<br><code>self.navigationController.navigationBar.barStyle = UIBarStyleBlack;</code><br>具体，可参考<a href="http://stackoverflow.com/questions/19108513/uistatusbarstyle-preferredstatusbarstyle-does-not-work-on-ios-7" target="_blank" rel="external">UIStatusBarStyle PreferredStatusBarStyle does not work on iOS 7</a></p>
</blockquote>
<p>恩，我们来看看运行效果。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-e79f8560574fcfbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20150913_5.png"></p>
<h2 id="5-设置返回按钮"><a href="#5-设置返回按钮" class="headerlink" title="5. 设置返回按钮"></a>5. 设置返回按钮</h2><p>从上面的效果图中我们可以看到返回按钮还是默认的蓝色按钮，下面我将会大家来介绍返回按钮的个性化。</p>
<ul>
<li>设置返回按钮的颜色<br>只需要设置tintColor属性即可<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.navigationController.navigationBar.tintColor = [<span class="built_in">UIColor</span> whiteColor];</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>得到的效果图如下：<br><img src="http://upload-images.jianshu.io/upload_images/452998-79a4ebc0c6585360.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20150915_1.png"></p>
<ul>
<li>只设置返回按钮的图片</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)goToBack &#123;</span><br><span class="line">    [<span class="keyword">self</span>.navigationController popViewControllerAnimated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setBackButtonWithImage &#123;</span><br><span class="line">    <span class="built_in">UIImage</span> *leftButtonIcon = [[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"LeftButton_back_Icon"</span>]</span><br><span class="line">                               imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</span><br><span class="line">    <span class="built_in">UIBarButtonItem</span> *leftButton = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithImage:leftButtonIcon</span><br><span class="line">                                                                   style:<span class="built_in">UIBarButtonItemStyleBordered</span></span><br><span class="line">                                                                  target:<span class="keyword">self</span></span><br><span class="line">                                                                  action:<span class="keyword">@selector</span>(goToBack)];</span><br><span class="line">    <span class="keyword">self</span>.navigationItem.leftBarButtonItem = leftButton;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修复navigationController侧滑关闭失效的问题</span></span><br><span class="line">    <span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer.delegate = (<span class="keyword">id</span>)<span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到的效果如下：<br><img src="http://upload-images.jianshu.io/upload_images/452998-f208552c7eb72096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20150915_2.png"></p>
<blockquote>
<p>这里需要注意的地方有三点：</p>
<ol>
<li>需要自己实现返回按钮的事件。</li>
<li>特别的解释下UIImage的<em>imageWithRenderingMode:</em>方法，参数<em>UIImageRenderingModeAlwaysOriginal</em> 表示总是用原图渲染，如果不这么设置，返回按钮将会显示tintColor的颜色(默认为蓝色)。UITabbarItem也存在同样地问题。 </li>
<li>我们自己设置返回按钮，会导致系统的侧滑关闭效果失效。添加上面代码中最后一句代码即可修复。</li>
</ol>
</blockquote>
<ul>
<li>仅设置返回按钮的文字</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setBackButtonTitle &#123;</span><br><span class="line">    <span class="built_in">UIBarButtonItem</span> *leftButton = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithTitle:<span class="built_in">NSLocalizedString</span>(<span class="string">@"取消"</span>, <span class="literal">nil</span>)</span><br><span class="line">                                                                   style:<span class="built_in">UIBarButtonItemStylePlain</span></span><br><span class="line">                                                                  target:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(goToBack)];</span><br><span class="line">    leftButton.tintColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    <span class="keyword">self</span>.navigationItem.leftBarButtonItem = leftButton;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到的效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-0f9e2f96ce6cd504.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20150915_3.png"></p>
<ul>
<li>自定义返回按钮<br>如果上面几种方式还无法满足你的要求（比如，需要同时设置返回按钮文字和图片），就需要用到<em>UIBarButtonItem</em>的<em>initWithCustomView</em>方法。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setCustomLeftButton &#123;</span><br><span class="line">    <span class="built_in">UIView</span>* leftButtonView = [[<span class="built_in">UIView</span> alloc]initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">40</span>)];</span><br><span class="line">    <span class="built_in">UIButton</span>* leftButton = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeSystem</span>];</span><br><span class="line">    leftButton.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</span><br><span class="line">    leftButton.frame = leftButtonView.frame;</span><br><span class="line">    [leftButton setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"LeftButton_back_Icon"</span>] forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [leftButton setTitle:<span class="string">@"返回"</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    leftButton.tintColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    leftButton.autoresizesSubviews = <span class="literal">YES</span>;</span><br><span class="line">    leftButton.contentHorizontalAlignment = <span class="built_in">UIControlContentHorizontalAlignmentLeft</span>;</span><br><span class="line">    leftButton.autoresizingMask = <span class="built_in">UIViewAutoresizingFlexibleWidth</span> | <span class="built_in">UIViewAutoresizingFlexibleLeftMargin</span>;</span><br><span class="line">    [leftButton addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(goToBack) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    [leftButtonView addSubview:leftButton];</span><br><span class="line">    <span class="built_in">UIBarButtonItem</span>* leftBarButton = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithCustomView:leftButtonView];</span><br><span class="line">    <span class="keyword">self</span>.navigationItem.leftBarButtonItem = leftBarButton;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到的效果图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-8b576c44f25d7118.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20150915_5.png"></p>
<blockquote>
<p>设置<em>rightBarButtonItem</em>基本上脱离不了上面的几种方式，大家可以参照上面返回按钮的设置方式。</p>
</blockquote>
<h2 id="6-隐藏导航栏底部的线条"><a href="#6-隐藏导航栏底部的线条" class="headerlink" title="6. 隐藏导航栏底部的线条"></a>6. 隐藏导航栏底部的线条</h2><p>有时候遇到一些特殊的要求，需要隐藏导航栏底部的线条。<br>两行代码就可以做到。</p>
<ul>
<li>设置导航栏的背景图（setBackgroundImage方法）</li>
<li>设置导航栏的shadowImage (setShadowImage方法)</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UINavigationBar</span> *navigationBar = <span class="keyword">self</span>.navigationController.navigationBar;</span><br><span class="line">    <span class="comment">//设置透明的背景图，便于识别底部线条有没有被隐藏</span></span><br><span class="line">    [navigationBar setBackgroundImage:[[<span class="built_in">UIImage</span> alloc] init]</span><br><span class="line">                       forBarPosition:<span class="built_in">UIBarPositionAny</span></span><br><span class="line">                           barMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line">    <span class="comment">//此处使底部线条失效</span></span><br><span class="line">    [navigationBar setShadowImage:[<span class="built_in">UIImage</span> new]];</span><br></pre></td></tr></table></figure>
<p>来看看效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-917239b652d32e73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20150922_1.png"></p>
<p>另外，还有一种做法，一行代码就可以达到效果，也真是够神奇的。。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法二：</span></span><br><span class="line">    <span class="keyword">self</span>.navigationController.navigationBar.clipsToBounds = <span class="literal">YES</span>;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>想要知道更详细的内容可以参考这个页面：<a href="http://stackoverflow.com/questions/19226965/how-to-hide-ios7-uinavigationbar-1px-bottom-line" target="_blank" rel="external">How to hide iOS7 UINavigationBar 1px bottom line</a></p>
</blockquote>
<h2 id="7-设置导航条底部线条的颜色"><a href="#7-设置导航条底部线条的颜色" class="headerlink" title="7. 设置导航条底部线条的颜色"></a>7. 设置导航条底部线条的颜色</h2><p>有了上面的基础，设置导航栏线条的颜色就变得很简单了。<br>首先，我做了个UIImage的分类：通过颜色转成UIImage；<br>然后，用上面的方案来设置导航栏底部线条。</p>
<p>颜色转图片的代码：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@implementation</span> UIImage (ColorImage)</span><br><span class="line"></span><br><span class="line">+ (UIImage *)<span class="attribute">imageWithColor</span>:(UIColor *)color</span><br><span class="line">&#123;</span><br><span class="line">    CGRect rect = CGRectMake(0<span class="selector-class">.0f</span>, <span class="selector-tag">0</span><span class="selector-class">.0f</span>, <span class="selector-tag">1</span><span class="selector-class">.0f</span>, <span class="selector-tag">1</span><span class="selector-class">.0f</span>);</span><br><span class="line">    UIGraphicsBeginImageContext(rect<span class="selector-class">.size</span>);</span><br><span class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</span><br><span class="line">    </span><br><span class="line">    CGContextSetFillColorWithColor(context, <span class="selector-attr">[color CGColor]</span>);</span><br><span class="line">    CGContextFillRect(context, rect);</span><br><span class="line">    </span><br><span class="line">    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">    UIGraphicsEndImageContext();</span><br><span class="line">    </span><br><span class="line">    return image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure></p>
<p>设置导航栏底部线条颜色的代码：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UINavigationBar</span> *navigationBar = <span class="keyword">self</span>.navigationController.navigationBar;</span><br><span class="line">    [navigationBar setBackgroundImage:[[<span class="built_in">UIImage</span> alloc] init]</span><br><span class="line">                       forBarPosition:<span class="built_in">UIBarPositionAny</span></span><br><span class="line">                           barMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line">    <span class="comment">//此处使底部线条颜色为红色</span></span><br><span class="line">    [navigationBar setShadowImage:[<span class="built_in">UIImage</span> imageWithColor:[<span class="built_in">UIColor</span> redColor]]];</span><br></pre></td></tr></table></figure></p>
<p>依照惯例，看下效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-3111c007f74ca168.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20150923_2.png"></p>
<blockquote>
<p>当然还有其他的方式也可以做到，如addSubview, addSubLayer等。感兴趣的话可以参考下这个页面：<a href="http://stackoverflow.com/questions/19101361/ios7-change-uinavigationbar-border-color" target="_blank" rel="external">iOS7 - Change UINavigationBar border color</a></p>
</blockquote>
<h2 id="8-在导航栏上添加多个按钮"><a href="#8-在导航栏上添加多个按钮" class="headerlink" title="8. 在导航栏上添加多个按钮"></a>8. 在导航栏上添加多个按钮</h2><p>以微信打开网页时的效果为例，效果图如下，有两个按钮：返回和关闭。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-80aaf5bfd6782e7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="微信效果图.png"><br>有下面两种方式可供选择，但是最终还是要用到<em>leftBarButtonItems</em>这个方法。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define UserMethod1 0</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIBarButtonItem</span> *closeItem = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithTitle:<span class="string">@"关闭"</span> style:<span class="built_in">UIBarButtonItemStylePlain</span> target:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(closeAction)];</span><br><span class="line">    <span class="keyword">if</span> (UserMethod1) &#123;</span><br><span class="line">        <span class="comment">//方法一:</span></span><br><span class="line">        <span class="keyword">self</span>.navigationItem.leftBarButtonItems = @[closeItem];</span><br><span class="line">        <span class="comment">//要求显示默认的返回按钮，但是文字会显示默认的Back，暂时还不知道这个文字怎么改</span></span><br><span class="line">        <span class="keyword">self</span>.navigationItem.leftItemsSupplementBackButton = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        <span class="built_in">UIButton</span>* leftButton = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeSystem</span>];</span><br><span class="line">        leftButton.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</span><br><span class="line">        leftButton.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">45</span>, <span class="number">40</span>);</span><br><span class="line">        [leftButton setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"LeftButton_back_Icon"</span>] forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">        [leftButton setTitle:<span class="string">@"返回"</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">        leftButton.tintColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">        leftButton.autoresizesSubviews = <span class="literal">YES</span>;</span><br><span class="line">        leftButton.contentHorizontalAlignment = <span class="built_in">UIControlContentHorizontalAlignmentLeft</span>;</span><br><span class="line">        leftButton.autoresizingMask = <span class="built_in">UIViewAutoresizingFlexibleWidth</span> | <span class="built_in">UIViewAutoresizingFlexibleLeftMargin</span>;</span><br><span class="line">        [leftButton addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(goToBack) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">        <span class="built_in">UIBarButtonItem</span>* backItem = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithCustomView:leftButton];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.navigationItem.leftBarButtonItems = @[backItem,closeItem];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>然后，运行的效果图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-1ee39cae2ec10a08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在导航栏上添加多个按钮.png"></p>
<blockquote>
<p>方法一用到了<code>leftItemsSupplementBackButton</code> 这个属性，会显示系统默认的返回按钮，但是文字也是显示默认的Back文字，目前还没找到怎么修改这个文字，如果有谁知道，还请不吝赐教；所以我暂时还是建议大家用方法二。相应的还有 <em>rightBarButtonItems</em> 这个属性，如果要在导航栏右侧展示多个按钮的话，可以设置这个属性。</p>
</blockquote>
<h2 id="9-在导航栏上添加分段控件"><a href="#9-在导航栏上添加分段控件" class="headerlink" title="9. 在导航栏上添加分段控件"></a>9. 在导航栏上添加分段控件</h2><p>这次，以QQ为例，代码如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UISegmentedControl *segControl = [[UISegmentedControl alloc] <span class="string">initWithItems:</span>@[@<span class="string">"消息"</span>,@<span class="string">"电话"</span>]];</span><br><span class="line">    segControl.tintColor = [UIColor <span class="string">colorWithRed:</span><span class="number">0.07</span> <span class="string">green:</span><span class="number">0.72</span> <span class="string">blue:</span><span class="number">0.96</span> <span class="string">alpha:</span><span class="number">1</span>];</span><br><span class="line">    [segControl <span class="string">setSelectedSegmentIndex:</span><span class="number">0</span>];</span><br><span class="line">    self.navigationItem.titleView = segControl;</span><br></pre></td></tr></table></figure></p>
<p>代码很简单，就是设置<code>titleView</code>这个属性，当然，你也可以把这个属性设置为你自定义的View。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/452998-77c7dc843dc0c96a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="类似于QQ的导航栏.png"></p>
<h2 id="10-导航栏全局属性设置"><a href="#10-导航栏全局属性设置" class="headerlink" title="10. 导航栏全局属性设置"></a>10. 导航栏全局属性设置</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//全局设置导航栏主题</span><br><span class="line">- (void)setNavigationControllerAppearance &#123;</span><br><span class="line">    [UINavigationBar appearance].barStyle  = UIBarStyleBlack;</span><br><span class="line">    <span class="string">[[UINavigationBar appearance] setBarTintColor:[UIColor colorWithWhite:0.1 alpha:0.5]]</span>;</span><br><span class="line">    <span class="string">[[UINavigationBar appearance] setTintColor:[UIColor whiteColor]]</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>全局设置导航栏的好处有两个：一是不用对每个NavigationBar进行设置；二是方便做主题管理，切换主题，只需要更改全局设置即可。</p>
<h2 id="11-与导航栏相关的一些开源组件"><a href="#11-与导航栏相关的一些开源组件" class="headerlink" title="11. 与导航栏相关的一些开源组件"></a>11. 与导航栏相关的一些开源组件</h2><h3 id="11-1-NJKWebViewProgress-类似于Safiri加载网页时的进度显示"><a href="#11-1-NJKWebViewProgress-类似于Safiri加载网页时的进度显示" class="headerlink" title="11.1 NJKWebViewProgress - 类似于Safiri加载网页时的进度显示"></a>11.1 <a href="https://github.com/ninjinkun/NJKWebViewProgress" target="_blank" rel="external">NJKWebViewProgress</a> - 类似于Safiri加载网页时的进度显示</h3><p><img src="https://camo.githubusercontent.com/082fc708cc461dc53832b7d14d5affdf475dd57b/68747470733a2f2f7261772e6769746875622e636f6d2f6e696e6a696e6b756e2f4e4a4b5765625669657750726f67726573732f6d61737465722f44656d6f4170702f53637265656e73686f742f73637265656e73686f74312e706e67" alt="网页加载进度.png"></p>
<h3 id="11-2-FDFullscreenPopGesture-一个丝滑的全屏滑动返回手势"><a href="#11-2-FDFullscreenPopGesture-一个丝滑的全屏滑动返回手势" class="headerlink" title="11.2 FDFullscreenPopGesture -  一个丝滑的全屏滑动返回手势"></a>11.2 <a href="https://github.com/forkingdog/FDFullscreenPopGesture" target="_blank" rel="external">FDFullscreenPopGesture</a> -  一个丝滑的全屏滑动返回手势</h3><p>对应的文章介绍可以点这个<a href="http://blog.sunnyxx.com/2015/06/07/fullscreen-pop-gesture/" target="_blank" rel="external">链接</a>。<br><img src="https://raw.githubusercontent.com/forkingdog/FDFullscreenPopGesture/master/Snapshots/snapshot0.gif" alt="丝滑的全屏返回手势.png"></p>
<p>最后，奉上Demo的地址：<a href="https://github.com/lexiaoyao20/NavigationBarDemo" target="_blank" rel="external">NavigationBarDemo</a></p>
]]></content>
    </entry>
    
  
  
</search>
